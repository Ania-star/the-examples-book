# STAT 29000 notes from Friday, August 25, 2017

# showing the location of the current directory
# (technically, this is "print working directory")
pwd

# show the files in the current directory
ls
# show the files in the current directory, with more details
ls -la

# change into the 290 directory
cd 290

# we can check which directory we are in, at any time
pwd

# and, again, we can check the files in the current directory anytime
ls

# change into the Project 1 Group 3 folder
# (each student will need to adjust this, according to her/his group)
cd gp01g3

# check what is in the current folder
ls

# we have a proj and a scratch folder
# (everything inside the proj folder is backed up daily,
#  but the space there is limited;
#  in contrast, there is almost unlimited space in the scratch folder)

# we change to the scratch directory
cd scratch/

# The touch command can make a new empty file
touch hithere.txt
touch thisisdrward.txt

# We see both of those files if we check the current directory:
ls

# We can remove a file using the rm command:
rm thisisdrward.txt 

# Checking the contents of the current folder, we see that it is gone:
ls

# We can make directories too, for instance:
mkdir mdwfolder

# The color of a folder is different, so they are easy to see:
ls

# We can change location into this new directory
cd mdwfolder/

# This command will take longer.
# It will download all of the airline data
# using a for loop:
for ((x = 1987 ; x <= 2008 ; x++)); do   wget http://stat-computing.org/dataexpo/2009/$x.csv.bz2;   bzip2 -d $x.csv.bz2; done

# We can change out of the current directory,
# and go back one level, i.e., back to the parent directory:
cd ..

# Here are the current directory contents
# (Notice that I type the ls command a lot!)
ls

# We can move the mdwfolder to a new location
# which is effectively the same as changing the name of the directory
mv mdwfolder/ pizza

# We see that the name of the directory changed:
ls

# We can create a new directory, and move the pizza directory into it:
mkdir mycontainer
mv pizza/ mycontainer/

# Now it looks like the pizza directory is gone,
# but it is simply inside the mycontainer directory:
ls

# If we change our location into the mycontainer directory,
# we will find the pizza directory:
cd mycontainer/

# There it is!
ls

# Now we can move the pizza directory one level higher
# i.e., we can put it back into the parent directory
mv pizza/ ..

# We can check to see that this worked:
ls
cd ..
ls

# If the 2008.csv file is in the current location,
# we can start to work with it
# (If not, then we need
#  to navigate to the location of the 2008.csv file first)

# We can see the first ten lines of this file:
head 2008.csv

# or the last 10 lines of the file:
tail 2008.csv

# or the last 3 lines of the file (we are using the -n flag here)
tail -n3 2008.csv

# or the first 2 lines of the file:
head -n2 2008.csv

# We can "pipe" the results from the head command
# to the cut command, using:
# a comma as a delimiter (that is the -d, flag)
# and cutting out the 17th field (that is the -f17 flag)
# This gives us the header of the 17th column 
# and the origin airports for the first nine flights
head 2008.csv | cut -d, -f17

# Similarly, these are the destination airports for the last 10 flights:
tail 2008.csv | cut -d, -f17

# Same thing, but now piped to the sort command,
# i.e., we see the result in sorted order
tail 2008.csv | cut -d, -f17 | sort

# Same thing, but now piped to the sort command,
# i.e., we see the result in sorted order,
# and without any repeats
tail 2008.csv | cut -d, -f17 | sort | uniq

# Same thing, but now piped to the sort command,
# i.e., we see the result in sorted order,
# and without any repeats,
# and also we used the -c flag on the uniq command,
# which gives a count of the number of such lines
# (Please note that we need to sort beforehand,
# since the uniq command finds occurrences of consecutive repeated lines)
tail 2008.csv | cut -d, -f17 | sort | uniq -c

# Changing from the tail command to the cat command,
# we can get ALL of the origin airports in the file.
# The cat command simply displays an entire file.
# This will take about a minute to run.
cat 2008.csv | cut -d, -f17 | sort | uniq -c

# Same thing, but sorting the results according to the
# most used airport of origin
cat 2008.csv | cut -d, -f17 | sort | uniq -c | sort -n

# This will take a REALLY long time.  We can
# get a sorted list of the counts for all of the origin airports
# across all of the files, by changing 2008.csv to *.csv
cat *.csv | cut -d, -f17 | sort | uniq -c | sort -n

