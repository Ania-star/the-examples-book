use mdw;

# These are some examples from the book Learning SQL.

# Here are all of the tables that we have loaded.
# (If you loaded the baseball tables, it will include those too!)

SHOW TABLES;

# Only 11 tables are from the book (the others are from the baseball database):
# 
# account
# branch
# business
# customer
# department
# employee
# individual
# officer
# product
# product_type
# transaction

# We can look at the account table

SELECT * FROM account;

# or look at the branch table

SELECT * FROM branch;

# We can see the kinds of variables that are saved in some of the tables:

DESC branch;
DESC employee;
DESC department;
DESC individual;
DESC officer;
DESC employee;

# These are the employees:

SELECT fname, lname, title FROM employee;

# This shows when they started working:

SELECT fname, lname, start_date FROM employee;

# These are the customers:

SELECT * FROM customer;

# Here are the customers' addresses:

SELECT address, city, state FROM customer;

# Sometimes the post office likes it when we put everything in upper case:

SELECT UPPER(address), UPPER(city), state FROM customer;

# We can manually add a new column with 'USA' in each row to the results:

SELECT UPPER(address), UPPER(city), state, 'USA' FROM customer;

# Here are the customers' current balances:

SELECT cust_id, avail_balance FROM account;

# We can change the values displayed on the fly
# (although the original values in the database are maintained)
# in this way, where we multiply each balance by 10:

SELECT cust_id, 10*avail_balance FROM account;

# We could multiply each balance by 1.07:

SELECT cust_id, 1.07*avail_balance FROM account;

# Notice, in the examples where we multiplied the balanced by 10 or by 1.07,
# the header of the column just showed the multiplication directly.
# If we prefer, we can name the column (for instance, as taxed_balanced),
# in this way:

SELECT cust_id, 1.07*avail_balance taxed_balance FROM account;

# Here are the states where customers come from:

SELECT state FROM customer;

# There are many repeated states.  This is a way to just see each entry once:

SELECT DISTINCT state FROM customer;

# Here we gather a lot of information about each employee, all at once:

SELECT employee.emp_id, employee.fname, employee.lname, employee.title, department.name FROM employee INNER JOIN department ON employee.dept_id = department.dept_id;

# This line of code can be written with a lot fewer characters, if we abbreviate employee with e and department with d, as follows:

SELECT e.emp_id, e.fname, e.lname, e.title, d.name FROM employee e INNER JOIN department d ON e.dept_id = d.dept_id;

# Again, here are all the customers:

SELECT * FROM customer;

# Just the Massachusetts customers:

SELECT * FROM customer WHERE state = 'MA';

# Just the New Hampshire customers:

SELECT * FROM customer WHERE state = 'NH';

# Just the ones from this specific postal code:

SELECT * FROM customer WHERE postal_code = '02451';

# Just the ones from two specific postal codes:

SELECT * FROM customer WHERE postal_code = '02451' OR postal_code = '02458';

# Just the ones from either of those postal codes, or from New Hampshire:

SELECT * FROM customer WHERE postal_code = '02451' OR postal_code = '02458' OR state = 'NH';

# Same as above, but only showing the customers who have customer type I:

SELECT * FROM customer WHERE (postal_code = '02451' OR postal_code = '02458' OR state = 'NH') AND cust_type_cd = 'I';

# Here are all of the accounts:

SELECT * FROM account;

# Here are their balances:

SELECT cust_id, status, avail_balance FROM account;

# Same example, but sorted by the balance sizes:
SELECT cust_id, status, avail_balance FROM account ORDER BY avail_balance;

# Same example again, but only showing balances that strictly exceed 10000:

SELECT cust_id, status, avail_balance FROM account WHERE avail_balance > 10000 ORDER BY avail_balance;

exit;

