****** from Monday's notes (Oct 20) ******
with a few small corrections,
and with new notes for Wednesday (Oct 22) included at the end.

Terminal:  A program that lets users type things into the shell.

Shell:  A program that takes the user's input and translates it into 
tasks for the operating system to do.

We will use one terminal on llc.stat.purdue.edu,
and it is located here in the System Tools > terminal (in the llc menu).

Once we open the terminal, we have several different shells we could use.
bash (Bourne Again SHell) is the shell that is loaded by default.
There are other shells too, e.g., csh, ksh, sh, tcsh, zsh.

You can type:  pwd
to see what you are working in base at the current moment,
within the directory structure of llc.
It is probably somewhere like:  /home/mdw

You can also type:  ls
to see what files are contained in your current directory.
(The is a lowercase l and then lowercase s.
It is not a number 1 and the lowercase s.)
If you want to write the information about these files with
one line per file, you can add the "-l" flag,
i.e., you can write:  ls -l
(Again, the flag is a lowercase l, not a number 1.)
If you want to see the files that are invisible
when you are browsing in the windows, you can use the "-a" flag:
i.e., you can write:  ls -la
Files are invisible in the windows when they start with a period.
Some of the setup files for your account start with a period.
That way, they can be present in your home directory but not intrusive.
Dave and Doug (the system administrators for the llc computer)
created some of them, and the operating system created
some of them by default.

Now that you have typed several commands, it is worthwhile to
explore hitting the up arrow and the down arrow, perhaps several times.
The up arrow takes you backwards through the commands you recently typed.
The down arrow takes you forward through these commands.
It should make sense if you just try and arrow up and arrow down a few times.
An alternative way to do this is to type:
control-p instead of the up arrow, to get the previous commands,
and to type:
control-n instead of the down arrow, to get the next commands.
If you have typed some commands at the bash prompt,
and you want to jump back to the start of the line,
you can type:  control-a  to take you back to the start of the line,
or you can type: control-e  to take you to the end of the line.
You can also type:  control-f  to go forward one character, and
control-b  to go backward one character, and 
control-d  to delete one character.
These commands save you time, rather than reaching for the arrow keys.
Your fingers can learn these keystrokes so naturally that you 
will not even remember what you are typing, if you do it over a 
long period of time.  My fingers know some keystrokes that my mind has 
completely forgotten, i.e., that I can do naturally, without thinking,
but if I want to show someone else how to do it, I have to stop and
think about what I just did.  I know that seems like Jedi magic or
but it's actually true.

Also, the mouse won't help you much, once you are in the terminal,
although if you want to, you can copy-and-paste with the mouse.
In general, bash provides a way of navigating around the computer
in a way that is much more powerful and in-depth than using the mouse.

You can launch applications from the terminal.
For instance, if you type:  xclock
then a clock will open externally.
Please notice that you cannot type anything else in bash
until you close the clock.  When you are ready to move onwards,
just close the xclock's window, and then you can type in bash again.
If you wanted to prevent that difficulty next type, you could (instead)
have typed:  xclock &
This will allow bash to ask the operating system to open the xclock
but also to keep going, i.e., to invite you to type more bash commands,
while the xclock is still open.  In a technical way of speaking, the
ampersand (&) symbol basically lets the operating system spawn a new
process, i.e., to start a new process running, independently from bash.

Speaking of processes, if you want to see the processes that are
running on llc at the moment, you can type:  top
This is a dynamic list of the processes that are running on llc at the moment.
When you are done with "top", you can type the letter q to quit.

You can also type:  who
to see who is working on llc at the moment.
Some people might have more than one process running at a time.

You can check the current date and time by typing:  date

You can find information about the other users on llc by typing:
cat /etc/passwd
This is running the cat command which "concatenates and prints files".
The file you are asking to print is in the /etc/passwd directory.
The fact that bash printed the file for you at the terminal is obvious.
The ability to concatenate files is not (yet) so obvious, since we
only used it for one file.
So let's do an example.  Let's make a couple silly files to play with.
Suppose we type nano myexample1.txt
and then type some stuff into this editor, and when we are done,
type control-o and hit return to save, and then type control-x to quit.
Suppose we type nano myexample2.txt
and then type some more stuff into this editor, and when we are done,
type control-o and hit return to save, and then type control-x to quit.
Now type:  cat myexample1.txt myexample2.txt
This will ask bash to concatenate everything into the two files together
and print it at the terminal for you to see.
This command called cat is very handy that way, i.e., it lets us quickly
see what is contained inside a file.

If you just want to see the first 10 lines of this example file,
you can type:  head myexample1.txt
That is helpful when a file is really long, and you only want
to see how it basically looks.
Similarly, if you just want to see the last 10 lines of this example file,
you can type:  tail myexample1.txt

We can get help for commands by using the man pages (man stands for manual).
E.g., if we type:  man grep
Then we get a manual page for the grep command.
We can arrow up and down inside this manual,
and even press space to thumb quickly through the manual,
and we can type:  q   when we are done, to exit the manual.

The manual for the who command reveals some interesting things.
For instance, if we read the manual for the who command:
man who
We will see that we can type:
who -m
to print information about the current user (i.e., about ourselves)
or alternatively we could type:
who am I
which has the same effect.

It is good to get familiar with the flags for commands.
For instance, if we want to know how to change the number of lines
that are printed by the head command, we can read the manual:
man head
We see that the -n flag will allow us to change the number of lines displayed.
So, for instance, if we only want to display the first three lines
of the myexample2.txt we could type:
head -n3 myexample2.txt

The cut command has some interesting flags, which we can find out about,
by reading the manual for the cut command:
man cut

For instance, if we look at the first few lines of the /etc/passwd file,
we see that the user names are in the first field,
so we could extract all of the user names for all users this way:
cut -d: -f1 /etc/passwd
or we could extract the user names of everyone currently logged in:
who | cut -c 1-9
or we could get the full names of 
everyone on the whole computer system:
cat /etc/passwd | cut -f5 -d:

It is especially important to get used to typing the tab key,
so that you can type faster in bash.
For instance, if you type: cat my
and then press tab, bash will fill in the next several letters of the
file name for you, i.e., it will auto-complete up to:  cat myexample
BUT it won't know how to finish, so you can type one more character
to help guide bash, say, for instance, 2, and then type tab again,
and bash will complete the rest of the file name, i.e., will add the .txt
for you.  So you can type this long sequence:
cat myexample2.txt
by just typing the following:
cat my   and then tab   and then 2   and then tab
So we used only 9 keystrokes:
cat my (then tab) 2 (then tab again)
and as a result we got a 18 keystroke sequence:
cat myexample2.txt
So we essentially doubled our keystrokes, i.e., spent half the time typing.
It doesn't sound like much, but when you think how many keystrokes
you can make in your life,
something that saves so much time is really helpful.
This is effectively adding time to your life, i.e., helping you
be much more productive.

So, for example, to type:
head -n3 myexample2.txt
You can type:
head -n3 my    and then tab   and then 2   and then tab
and you saved a lot of keystrokes.

As another example of productivity, suppose that you type 
something completely stupid at the bash prompt, and then you
want to erase it.
You can type control-a (to go back to the beginning of the line)
and then type control-d (to erase all of the characters on the line)
This is much better than just having to hold in the delete key
and wait for bash to delete the characters one at a time.

We can type commands to search for a phrase in a file using grep, e.g.,
grep asdf myexample1.txt
This lets me search for the phrase asdf in the file myexample1.txt
or I could search for pizza:
grep pizza myexample1.txt
grep will return every single line it finds from the file,
that has the pattern you are looking for.

We can use the wc command to find out how many lines, words, and characters
are in a certain file.

You can also "pipe" the output from one command into another command.
The pipe key is found by typing the backslash key, while using shift.
I.e., you can type shift-backslash to get the pipe symbol.
This might be a key you never typed on your keyboard before!
It was perhaps feeling lonely in the past.  It is a powerful idea.
When we "pipe" the output from one command into another command,
it is like asking to do one task, and whatever happens,
we send the output from the first task into a second task, 
as the input for the second task:
For instance, you could type:
man wc | grep for
This will print the manual file for the wc commands
but instead of opening it on the screen, it will send the output
from the manual into the grep command, and then grep will search for
the string:  for
inside the input it was sent
(i.e., inside the manual pages for the wc file)
We can look for other words too, e.g., maybe we should try:
man wc | grep IEEE
man wc | grep pizza
man wc | grep Jedi
man wc | grep report
man wc | grep foo
man wc | grep "string of"
Etc., etc....  You can search for other strings too.

You can launch other programs from bash too, e.g., if you type:  xmaple
then Maple will launch on llc.
Similarly, typing:  matlab
will launch the Matlab program.

There is a cute little command called:  cal  which is a calendar program,
e.g., you can try:
cal
cal 10 2014
cal 2014

We sometimes want to move around the directory structure for the computer.
bash is really helpful for this.  Just to remind you, we can check
our current location in the directory structure by typing:
pwd
which stands for "print working directory"
and you can type:
ls
to list the contents of the current directory.
(I always prefer to type:   ls -l    or even to type:   ls -la)

We can use the cd command to change directories:
It is helpful to know that there are two kinds of ways to 
specify the directory where you want to go:
You can use absolute directory names, which start with the / character
because you are specifying the path (i.e., location) to the directory,
starting at the base of the machine.
The other way is to use a relative directory location,
i.e., if you are inside your home directory, and you have a folder
named  myfolder  you can change into this directory by typing:
cd myfolder
You can frequently check (using pwd) to see where you are in the
directory structure.

If you are not in your home directory, you can change into a 
folder in your home directory with a tilde,
by typing, for instance: cd ~/myfolder

You can also just type:  cd  with no flags at all, to go immediately back
to your home directory, from anywhere on llc.

You can type mkdir to make a new directory, e.g., if you type:
mkdir myfolder
You will create a new folder in your home directory called:  myfolder
Again, you can change into this directory using the command:  cd myfolder
and then you can check to see that you got there by typing: pwd

If you want to go up one level in the directory structure, you can
also type:  cd ..
For instance, if you are inside /home/mdw/myfolder
and you want to go back to /home/mdw
You can type:  cd ..
and you can check with pwd to make sure that this worked.

If you named a file or folder with a space (which is not a great idea),
it is OK, but you need to put a backslash before the space, 
for instance:
mkdir pizza\ stuff
will create a folder named:  pizza stuff  (with a space)
If you want to change into that directory, you could type:
cd pizza\ stuff
If you want to move back up a level (i.e., out of the directory)
you could type cd ..

We can copy files, e.g., we can copy the file myexample2.txt
into a new file, for example:
cp myexample2.txt pizza.txt
and we can check that this worked by typing:  ls -la

We can also copy files into new locations, e.g.,
we can copy a file into the new folder pizza\ stuff
cp myexample2.txt pizza\ stuff/trythis.txt
(are you remembering to use the tab key, e.g., so that
you do not have to type pizza\ stuff manually??)

We can also move files around using the mv command, e.g.,
mv myexample1.txt anotherexample.txt
will basically rename the file myexample1.txt to be anotherexample.txt
Afterwards, we will no longer have a file called myexample1.txt anymore,
because it has been renamed.
We could also move this into the pizza\ stuff folder:
mv anotherexample.txt pizza\ stuff
and we could move it back to the current directory:
cd pizza\ stuff
mv anotherexample.txt ../
(this moves it back down one directory level)

If you want to remove a file or folder, you can use the rm command,
for instance:
rm pizza\ stuff/trythis.txt

or we could remove the whole directory:
rmdir pizza\ stuff

Please NEVER EVER use the command rm -rf
because that is a recursive delete command, which will delete
all of the current files in your current directory.
This is a CRUEL JOKE that some people will try to inflict on new users.
Please avoid such things carefully.
(If you accidentally delete some files that you need,
Dr Ward can show you how to access the backup system for llc.)

We can compare two files using the diff command, which is extremely powerful.
For instance, suppose we copy myexample2.txt to a new file,
called slightlyoff.txt by typing:
cp myexample2.txt slightlyoff.txt
and then we edit the slightlyoff.txt file:
nano slightlyoff.txt
(change the file slightly, and then type control-o and then return to save, 
and control-x to exit)
and then run the diff command to compare the two files:
diff myexample2.txt slightlyoff.txt
The output of the diff command takes a little time to get used to, but
it basically reveals portions of the two files that are different,
identifying the line numbers that are different,
and showing the two version of these line numbers.

We can type:  exit
when we are done and ready to end the session.

****** new notes for Wednesday (Oct 22) ******

We can sort the lines of a file using the sort command:
sort myexample2.txt

You can use the * as a wildcard, which means zero or more letters.
For instance:   cat *.txt
will concatenate all files (in the current directory)
that end in .txt together and will print them at the terminal.

To extend this idea:  cat *.txt | grep pizza
will print all lines from all *.txt files that contain the word pizza.

You can print the output from commands to a file, for instance,
we can concatenate all of the *.txt files and put the output 
into a new file, called bigresult.txt:
cat *.txt >bigresult.txt

As another example, you can store the list of all users who
are currently logged onto the server, into a new file called users.txt:
who >users.txt

If you use the output on a file that already exists, then bash will
write over the current file, i.e., if you wrote:
who >myexample2.txt
then the results from the who command will overwrite 
the previous myexample2.txt file.

If you prefer to put the output at the end of a file 
instead of writing over the file, you can use two arrows, for instance,
who >>myexample1.txt
will put the output from the who command
at the end of the myexample1.txt file.

We can remove duplicated lines, when they appear next to each other,
by using the uniq command, which is often used
together with the sort command,
i.e., we can sort a file and then pipe it to the uniq command,
to remove any duplicated lines:
sort myexample1.txt | uniq

If you start something running and it doesn't stop as you expect,
and you want to stop it running, then it is worthwhile to try:  control-c

