# We first switch into a group directory:
cd /proj/gpproj15/p06g1

# Here are the flights with Origin airports that start with I
awk -F, 'BEGIN{ } { if ($17 ~ /^I/) print $17 } END{ }' june1990.csv 

# Here are the flights with Origin airports that start with IA
awk -F, 'BEGIN{ } { if ($17 ~ /^IA/) print $17 } END{ }' june1990.csv 

# Now we sort the data and find the unique airports like this.
awk -F, 'BEGIN{ } { if ($17 ~ /^IA/) print $17 } END{ }' june1990.csv | sort | uniq

# Here are the flights with Origin airports that end with D
awk -F, 'BEGIN{ } { if ($17 ~ /D$/) print $17 } END{ }' june1990.csv | sort | uniq

# Here are the flights with Origin airports that have the pattern I.D
# where the period stands for any character.
awk -F, 'BEGIN{ } { if ($17 ~ /I.D/) print $17 } END{ }' june1990.csv | sort | uniq

# Square brackets mean anything inside the square brackets is allowed.
# These are the Origin airports that end with the letter D, E, or F.
awk -F, 'BEGIN{ } { if ($17 ~ /[DEF]$/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the Origin airports that end with the letter D, E, F, ..., or M.
awk -F, 'BEGIN{ } { if ($17 ~ /[DEFGHIJKLM]$/) print $17 } END{ }' june1990.csv | sort | uniq

# This achieves the same thing, because D-M stands for the letters D, E, F, ..., or M.
awk -F, 'BEGIN{ } { if ($17 ~ /[D-M]$/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the Origin airports that start with the letter D, E, F, ..., or M.
awk -F, 'BEGIN{ } { if ($17 ~ /^[D-M]/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the Origin airports that do not start with any of the letters A, B, C, ..., X.
awk -F, 'BEGIN{ } { if ($17 ~ /^[^A-X]/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the Origin airports that do not start with any of the letters A, B, C, ..., U.
awk -F, 'BEGIN{ } { if ($17 ~ /^[^A-U]/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the Origin airports that end with a letter
# that is not any of the letters A, B, C, ..., U.
awk -F, 'BEGIN{ } { if ($17 ~ /[^A-U]$/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the Origin airports that end with a letter
# that is not any of the letters A, B, C, ..., X.
awk -F, 'BEGIN{ } { if ($17 ~ /[^A-X]$/) print $17 } END{ }' june1990.csv | sort | uniq

# This has exactly the same effect.  The !~ means that the pattern does not match.
awk -F, 'BEGIN{ } { if ($17 !~ /[A-X]$/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the airports that start with CM or start with IN
awk -F, 'BEGIN{ } { if ($17 ~ /^CM|^IN/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the airports that start with AL or IN
awk -F, 'BEGIN{ } { if ($17 ~ /^(AL|IN)/) print $17 } END{ }' june1990.csv | sort | uniq

# These are the airports that start with IN or that have MD anywhere.
# Notice that the MD does not have a carrot before the MD.
awk -F, 'BEGIN{ } { if ($17 ~ /^IN|MD/) print $17 } END{ }' june1990.csv | sort | uniq

# Now we turn our attention to the built-in dictionary of words
head /usr/share/dict/words
cat /usr/share/dict/words

# We first find the number of words in the dictionary
cat /usr/share/dict/words | wc

# Now we find the words with c, followed by 0 or more occurrences of "or", followed by d
awk 'BEGIN{ } { if($0 ~ /c(or)*d/ ) print $0} END{ }'  /usr/share/dict/words

# Same thing, but with 1 or more occurrences of "or" instead of 0 or more occurrences
awk 'BEGIN{ } { if($0 ~ /c(or)+d/ ) print $0} END{ }'  /usr/share/dict/words

# This is the number of words in the first set above:
awk 'BEGIN{ } { if($0 ~ /c(or)*d/ ) print $0} END{ }'  /usr/share/dict/words | wc

# This is the number of words in the second set above:
awk 'BEGIN{ } { if($0 ~ /c(or)+d/ ) print $0} END{ }'  /usr/share/dict/words | wc

# The number of words with cd is the difference in these two lists:
awk 'BEGIN{ } { if($0 ~ /cd/ ) print $0} END{ }'  /usr/share/dict/words | wc

# This is the same effect; notice that we use  -W posix  at the start,
# so that we can specify how many occurrences of the pattern occur.
awk -W posix 'BEGIN{ } { if($0 ~ /c((or){0})d/ ) print $0} END{ }'  /usr/share/dict/words | wc

# Here are the number of words with at least one occurrence of the pattern "ed"
awk 'BEGIN{ } { if($0 ~ /(ed)+/ ) print $0} END{ }'  /usr/share/dict/words | wc

# This has the same effect:
awk -W posix 'BEGIN{ } { if($0 ~ /(ed){1,}/ ) print $0} END{ }'  /usr/share/dict/words | wc

# Here are the number of words with at least two occurrences of the pattern "ed"
awk -W posix 'BEGIN{ } { if($0 ~ /(ed){2,}/ ) print $0} END{ }'  /usr/share/dict/words | wc

# Here are the number of words with at least two occurrences of the pattern "ed"
awk -W posix 'BEGIN{ } { if($0 ~ /(ed){3,}/ ) print $0} END{ }'  /usr/share/dict/words | wc

# the words with deed:
awk -W posix 'BEGIN{ } { if($0 ~ /deed/ ) print $0} END{ }'  /usr/share/dict/words

# the words with deedee:
awk -W posix 'BEGIN{ } { if($0 ~ /(dee){2}/ ) print $0} END{ }'  /usr/share/dict/words

# the words with .a.a.a where the dots are replaced with any letters, like wildcards:
awk -W posix 'BEGIN{ } { if($0 ~ /(.a){3}/ ) print $0} END{ }'  /usr/share/dict/words

# the words with .a.a.a.a where the dots are replaced with any letters, like wildcards:
awk -W posix 'BEGIN{ } { if($0 ~ /(.a){4}/ ) print $0} END{ }'  /usr/share/dict/words

# the words with .i.i.i.i.i where the dots are replaced with any letters, like wildcards:
awk -W posix 'BEGIN{ } { if($0 ~ /(.i){5}/ ) print $0} END{ }'  /usr/share/dict/words

# these are words with thumb or thb because the ? means either 0 or 1 occurrences
awk -W posix 'BEGIN{ } { if($0 ~ /th(um)?b/ ) print $0} END{ }'  /usr/share/dict/words

# here we print the lowercase versions of such words
awk -W posix 'BEGIN{ } { if($0 ~ /th(um)?b/ ) print tolower($0)} END{ }'  /usr/share/dict/words

# here we print the uppercase versions of such words
awk -W posix 'BEGIN{ } { if($0 ~ /th(um)?b/ ) print toupper($0)} END{ }'  /usr/share/dict/words

# Now we write all of the words in lowercase
awk 'BEGIN{ } { print tolower($0)} END{ }' /usr/share/dict/words

# Now we write all of the words in uppercase
awk 'BEGIN{ } { print toupper($0)} END{ }' /usr/share/dict/words | tail

Finally, we substitute the capital T for the lowercase t.
awk 'BEGIN{ } { gsub(/t/, "T"); print $0 } END{ }' /usr/share/dict/words
exit

