# just a few notes:
# it is easy to move back and forth on the command line
# control a goes to start of line
# control e goes to end of line
# control k deletes the current line

# We first explore a pattern matching utility called grep
# which lets us search for patterns in a file.
# We had a file called trythis.txt from last session.
# It looked like this:
cat trythis.txt

# We can search for phrases such as "pizza" or "this" in the file.
grep pizza trythis.txt
grep this trythis.txt

# We can search for lines of an airplane data file containing "IND".
# Here are the first 10 such lines from the 2008 airplane data.
# Notice that we pipe the results to the head function
grep IND /data/public/dataexpo2009/2008.csv | head

# We can (instead) pipe all of the results to the wc function
# so that we can, for instance, count the number of such lines.
grep IND /data/public/dataexpo2009/2008.csv | wc

# Remember that the manual page for wc is found in this way:
man wc

# We can search within a manual by piping the manual to the grep command.
man wc | grep print
man wc | grep byte
man wc | grep pizza
man wc | grep "for each"

# Remember that we spawned an X window with a clock on Wednesday.
xclock &

# We can do similar things with Maple and Matlab.
xmaple &
matlab &

# Recall that "ls" shows the contents of the current directory.
ls

# We can make a pizzafolder.
mkdir pizzafolder

# Now let's take a look at the permissions for the folder.
ls -la

# We change the permissions of pizzafolder to 755
# so that the owner can read, write, and execute,
# but the owner's group and everyone else can only read and execute.
chmod 755 pizzafolder/

# there are discussions about this in many places on the web,
# for instance, here is one such help page from UNC at Chapel Hill
# http://help.unc.edu/help/how-to-use-unix-and-linux-file-permissions/

# As another example, we can change the permissions of the trythis.txt file
# so that the owner can read and write it,
# but the owner's group and everyone else can only read it.
ls -la
chmod 644 trythis.txt

# We can now go into the pizza folder.
cd pizzafolder/

# and add to the file myorder.txt
nano myorder.txt

# We can copy the file myorder.txt to another file called myFridaystuff.txt
# This gives us two separate copies of the file.
# Modifying one of them does not change the other file's contents.
cp myorder.txt myFridaystuff.txt
nano myFridaystuff.txt 
cat myFridaystuff.txt 
cat myorder.txt 

# We can even remove myorder.txt and we will still have myFridaystuff.txt
rm myorder.txt 

# There are system backups, just FYI.  To reach them, we go here:
cd /proj/.zfs/snapshot

# If we look at the directory contents, we see that there are
# hourly, daily, and monthly backups.
ls
cd zfs-auto-snap_daily-2015-10-03-0000/

# We can, for instance, go into the Project 4, Group 1 folder and 
# retrieve an older version of Madi's file.
cd zfs-auto-snap_daily-2015-10-03-0000/gpproj15/p04g1
ls
cp Madi_Denning.R /home/mdw/pizzafolder/

# Since the pizzafolder is in our home directory, we can use
# the tilde (which is an abbreviation for our home directory)
# and accomplish this in a shorter way.
cp Madi_Denning.R ~/pizzafolder

# Now we can change back into our home directory's pizzafolder
cd ~/pizzafolder/

# and the file is there, recovered from the backup system.
ls

# Another helpful utility is the diff command.
# This is helpful if you have multiple versions of a file that
# you want to compare.
# To demonstrate it, we make a copy of the file myFridaystuff.txt
cp myFridaystuff.txt mysecondorder.txt

# and we modify the copy
nano mysecondorder.txt 

# Then we can use the diff command to find the differences in the two files.
diff myFridaystuff.txt mysecondorder.txt 

# We can see these two files directly as well:
cat myFridaystuff.txt 
cat mysecondorder.txt 

# We can also concatenate both files together into one new file.
cat myFridaystuff.txt mysecondorder.txt >mynewfile.txt

# Moreover, we can concatenate all of the files with a .txt extension
# by using the star "*", which means that any pattern is allowable:
cat *.txt >myothernewfile.txt

# This can be very powerful if, for instance, you want to
# concatenate a lot of large files together.

# For example, we can look at the heads of each of the airline files.
head -n3 /data/public/dataexpo2009/*.csv

# We can put all of those heads of the files into one (new) common file.
head -n3 /data/public/dataexpo2009/*.csv >airlineheadstuff.txt

# Without the "head" in the previous line, i.e., by using "cat" instead of "head",
# we could have concatenated all of the airline data from all of the years
# into one large file (it would be a huge file, so if you want to try that,
# you should move into your scratch directory first).

# That would look something like this:
# cd /scratch/gpproj15/p05g1/
# cat /data/public/dataexpo2009/19.csv >airline.csv
# Note: That will do almost the right thing, because it will get all
# of the files from 1987.csv to 2008.csv
# but there is also a file called allyears.csv, and it will include that too.
# So you will essentially gett two copies of the flights.
# We will return to this example later.

# Recall that "top" lets us see who is using the system,
# and how much memory their jobs are using,
# and what percentage of the processor time it is consuming.
top

# we can type the letter "q" (without quotes) when we want to quit.

# If we want to expand the length of our bash history, we can go to
# our home directory and edit the .bashrc file:
cd ~
nano .bashrc

# Under the line:
# User specific aliases and functions
# we can add two new lines (WITHOUT putting the hashtag before them)
#    HISTSIZE=50000
#    HISTFILESIZE=500000

# One last thing.  The bash shell is very useful for us because
# it can help us to preprocess our data.
# For example, we can extract all of the lines of the allyears.csv file
# and put them into a new file with the airline data that is
# relevant to Indy, as follows:
grep IND /data/public/dataexpo2009/allyears.csv >myindydata.csv

# Now we are done for the day.
exit
